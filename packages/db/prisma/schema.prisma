generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  // email     String   @unique
  clerkId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserBalance        UserBalance?
  Workflows          Workflow[]
  WorkflowExecutions WorkflowExecution[]
  ExecutionPhases    ExecutionPhase[]
  Credentials        Credential[]
  Purchases          UserPurchase[]

  connections Connections[]
  Discord     DiscordWebhook[]
  Slack       Slack[]
  Notion      Notion[]
  GoogleDocs  GoogleDocs[]
}

model UserBalance {
  id      String @id @default(cuid())
  userId  String @unique
  credits Int

  user User @relation(fields: [userId], references: [id])
}

model Workflow {
  id            String         @id @default(cuid())
  userId        String
  name          String
  description   String?
  definition    String
  executionPlan String?
  cron          String?
  status        WorkflowStatus @default(DRAFT)
  creditsCost   Int
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus WorkflowExecutionStatus?
  nextRunAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions WorkflowExecution[]

  @@unique([userId, name])
}

enum WorkflowStatus {
  ACTIVE
  DRAFT
}

model WorkflowExecution {
  id              String                  @id @default(cuid())
  workflowId      String
  userId          String
  trigger         WorkflowExecutionType   @default(MANUAL)
  status          WorkflowExecutionStatus @default(PENDING)
  createdAt       DateTime                @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  creditsConsumed Int
  definition      String     @default("{}")

  workflow        Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id])
  phases          ExecutionPhase[]
  ExecutionOutbox ExecutionOutbox[]
}

enum WorkflowExecutionType {
  MANUAL
  SCHEDULED
  TRIGGERED
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model AvailableTrigger {
  id         String     @id @default(cuid())
  name       String
  key        TriggerKey @unique
  image      String?
  createdAt  DateTime   @default(now())
  taskInfo   TaskInfo   @relation(fields: [taskInfoId], references: [id])
  taskInfoId String     @unique

  actions        AvailableTriggerAction[]
  ExecutionPhase ExecutionPhase[]
}

enum TriggerKey {
  LAUNCH_BROWSER
}

model AvailableAction {
  id         String    @id @default(cuid())
  name       String
  key        ActionKey @unique
  image      String?
  createdAt  DateTime  @default(now())
  taskInfo   TaskInfo  @relation(fields: [taskInfoId], references: [id])
  taskInfoId String    @unique

  triggers       AvailableTriggerAction[]
  ExecutionPhase ExecutionPhase[]
}

enum ActionKey {
  PAGE_TO_HTML
  EXTRACT_TEXT_FROM_ELEMENT
}

model TaskInfo {
  id               String             @id @default(cuid())
  label            String
  icon             String?
  type             String
  isEntryPoint     Boolean            @default(false)
  inputs           TaskParam[]        @relation("TaskInfoInputs")
  outputs          TaskParam[]        @relation("TaskInfoOutputs")
  credits          Int
  AvailableTrigger AvailableTrigger[]
  AvailableAction  AvailableAction[]
}

enum TaskType {
  LAUNCH_BROWSER
  PAGE_TO_HTML
  EXTRACT_TEXT_FROM_ELEMENT
}

model TaskParam {
  id         String        @id @default(cuid())
  type       TaskParamType
  name       String
  helperText String?
  required   Boolean       @default(false)
  hideHandle Boolean       @default(false)
  variant    String?

  TaskInfoInput  TaskInfo[] @relation("TaskInfoInputs")
  TaskInfoOutput TaskInfo[] @relation("TaskInfoOutputs")
}

enum TaskParamType {
  STRING
  BROWSER_INSTANCE
}

model AvailableTriggerAction {
  id        String           @id @default(cuid())
  triggerId String
  actionId  String
  trigger   AvailableTrigger @relation(fields: [triggerId], references: [id])
  action    AvailableAction  @relation(fields: [actionId], references: [id])

  @@unique([triggerId, actionId])
}

model ExecutionPhase {
  id                  String               @id @default(cuid())
  userId              String
  status              ExecutionPhaseStatus @default(CREATED)
  number              Int
  data                String
  name                String
  startedAt           DateTime?
  completedAt         DateTime?
  inputs              String?
  outputs             String?
  creditsConsumed     Int
  workflowExecutionId String
  user                User                 @relation(fields: [userId], references: [id])
  workflowExecution   WorkflowExecution    @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  logs                ExecutionLog[]

  triggerId String?
  actionId  String?
  trigger   AvailableTrigger? @relation(fields: [triggerId], references: [id])
  action    AvailableAction?  @relation(fields: [actionId], references: [id])
}

model ExecutionOutbox {
  id                String            @id @default(cuid())
  workflowExecId    String
  workflowExecution WorkflowExecution @relation(fields: [workflowExecId], references: [id], onDelete: Cascade)
}

enum ExecutionPhaseStatus {
  CREATED
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model ExecutionLog {
  id               String   @id @default(cuid())
  executionPhaseId String
  logLevel         logLevel
  message          String
  timestamp        DateTime @default(now())

  phase ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

enum logLevel {
  INFO
  WARN
  ERROR
}

model Credential {
  id        String   @id @default(cuid())
  userId    String
  name      String
  value     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserPurchase {
  id          String   @id @default(cuid())
  userId      String
  stripeId    String
  description String?
  amount      Int
  currency    String
  date        DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Connections Connections[]
}

model Slack {
  id               String        @id @default(uuid())
  teamId           String
  teamName         String
  botUserId        String
  authedUserId     String
  slackAccessToken String        @unique
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Connections      Connections[]
}

model Notion {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  workspaceId   String        @unique
  workspaceName String
  workspaceIcon String
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Connections   Connections[]
}

model GoogleDocs {
  id           String        @id @default(uuid())
  accessToken  String        @unique
  refreshToken String?
  folderId     String?
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  Connections  Connections[]
}

model Connections {
  id             String          @id @default(uuid())
  type           String // "slack" | "discord" | "notion" | "googleDocs"
  discordId      String?
  slackId        String?
  notionId       String?
  googleDocsId   String?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  DiscordWebhook DiscordWebhook? @relation(fields: [discordId], references: [id])
  Slack          Slack?          @relation(fields: [slackId], references: [id])
  Notion         Notion?         @relation(fields: [notionId], references: [id])
  GoogleDocs     GoogleDocs?     @relation(fields: [googleDocsId], references: [id])
}
