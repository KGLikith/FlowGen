"use client"

import type { ExecutionPhase } from "@/gql/graphql"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { useState } from "react"
import { cn } from "@/lib/utils"

function KeyValueDisplay({ label, value }: { label: string; value: unknown }) {
    const [expanded, setExpanded] = useState(false)
    const strValue = String(value)

    return (
        <div className="space-y-1">
            <label className="text-sm font-medium text-muted-foreground">{label}</label>
            <div
                className={cn(
                    "p-3 bg-muted/40 rounded-md font-mono text-sm cursor-pointer whitespace-pre-wrap break-all",
                    !expanded && "line-clamp-3"
                )}
                onClick={() => {
                    if (strValue.length > 120) {
                        setExpanded(!expanded)
                    }
                }}
            >
                {strValue}
            </div>
            {
                expanded && (
                    <button
                        onClick={() => setExpanded(false)}
                        className="text-xs text-primary hover:underline"
                    >
                        Show less
                    </button>
                )
            }
            {!expanded && strValue.length > 120 && (
                <button
                    onClick={() => setExpanded(true)}
                    className="text-xs text-primary hover:underline"
                >
                    Show more
                </button>
            )}
        </div>
    )
}

interface PhaseDetailsProps {
    phase: ExecutionPhase
}

export default function PhaseDetails({ phase }: PhaseDetailsProps) {
    const inputs = phase.inputs ? JSON.parse(phase.inputs) : {}
    const outputs = phase.outputs ? JSON.parse(phase.outputs) : {}
    const hasOutputs = Object.keys(outputs).length > 0

    const getDurationBadge = () => {
        if (!phase.startedAt) return "Not started"
        if (!phase.completedAt) return "Running..."

        const start = new Date(phase.startedAt)
        const end = new Date(phase.completedAt)
        const duration = end.getTime() - start.getTime()

        if (duration < 1000) return `${duration}ms`
        return `${Math.round(duration / 1000)}s`
    }

    return (
        <div className="p-6 space-y-6 w-full">
            {/* Header */}
            <div className="flex items-center justify-start flex-wrap gap-4">
                <div className="flex items-center gap-1">
                    <Badge variant="secondary" className="text-xs">Credits</Badge>
                    <span className="font-semibold text-sm">{phase.creditsConsumed ?? "â€”"}</span>
                </div>
                <div className="flex items-center gap-1">
                    <Badge variant="outline" className="text-xs">Duration</Badge>
                    <span className="font-semibold text-sm">{getDurationBadge()}</span>
                </div>
            </div>

            {/* Inputs Section */}
            <Card className="w-full">
                <CardHeader className="pb-3">
                    <CardTitle className="text-base font-medium">Inputs</CardTitle>
                    <p className="text-sm text-muted-foreground">Inputs used for this phase</p>
                </CardHeader>
                <CardContent className="space-y-4">
                    {Object.keys(inputs).length > 0 ? (
                        Object.entries(inputs).map(([key, value]) => (
                            <KeyValueDisplay key={key} label={key} value={value} />
                        ))
                    ) : (
                        <p className="text-sm text-muted-foreground">No inputs for this phase</p>
                    )}
                </CardContent>
            </Card>

            {/* Outputs Section */}
            <Card className="w-full">
                <CardHeader className="pb-3">
                    <CardTitle className="text-base font-medium">Outputs</CardTitle>
                    <p className="text-sm text-muted-foreground">Outputs generated by this phase</p>
                </CardHeader>
                <CardContent className="space-y-4">
                    {hasOutputs ? (
                        Object.entries(outputs).map(([key, value]) => (
                            <KeyValueDisplay key={key} label={key} value={value} />
                        ))
                    ) : (
                        <p className="text-sm text-muted-foreground">No parameters generated by this phase</p>
                    )}
                </CardContent>
            </Card>

            {/* Logs Section */}
            <Card className="w-full">
                <CardHeader className="pb-3">
                    <CardTitle className="text-base font-medium">Logs</CardTitle>
                    <p className="text-sm text-muted-foreground">Logs generated by this phase</p>
                </CardHeader>
                <CardContent>
                    {phase.logs && phase.logs.length > 0 ? (
                        <div className="space-y-2">
                            <div className="grid grid-cols-5 gap-4 pb-2 border-b text-xs font-medium text-muted-foreground">
                                <span className="col-span-1">Time</span>
                                <span className="col-span-1">Level</span>
                                <span className="col-span-3">Message</span>
                            </div>
                            {phase.logs.map((log, index) => (
                                <div
                                    key={index}
                                    className="grid grid-cols-5 gap-4 py-2 text-sm border-b last:border-0"
                                >
                                    <span className="text-muted-foreground col-span-1">{new Date(log.timestamp).toLocaleString()}</span>
                                    <Badge
                                        variant={
                                            log.logLevel === "ERROR"
                                                ? "destructive"
                                                : log.logLevel === "WARN"
                                                    ? "secondary"
                                                    : "outline"
                                        }
                                        className="w-fit text-xs col-span-1"
                                    >
                                        {log.logLevel}
                                    </Badge>
                                    <span className="break-words col-span-3">{log.message}</span>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <p className="text-sm text-muted-foreground">No logs available for this phase</p>
                    )}
                </CardContent>
            </Card>
        </div>
    )
}
